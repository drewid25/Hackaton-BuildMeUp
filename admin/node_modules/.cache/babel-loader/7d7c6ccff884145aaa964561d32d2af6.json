{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    const newModel = _extends({}, cellModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _cellModesModel$id = cellModesModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_cellModesModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [cellModesModel, updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue\n    } = params;\n    const newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(_ref => {\n      let [id, fields] = _ref;\n      Object.entries(fields).forEach(_ref2 => {\n        let [field, params] = _ref2;\n\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsIdToIdLookupSelector","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","prevCellModesModel","useRef","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","signature","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","isProcessingProps","disableIgnoreModificationsIfProcessingProps","stopCellEditMode","onCellEditStart","onCellEditStop","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateFieldInCellModesModel","newProps","_cellModesModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","value","getCellValue","error","setCellFocus","updateStateToStopCellEditMode","finishCellEditMode","unstable_moveFocusToRelativeCell","rowUpdate","unstable_getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","_editingState$id","_editingState$id$fiel","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","hasChanged","getRowWithUpdatedValuesFromCellEditing","valueSetter","editingApi","unstable_setCellEditingEditCellValue","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","_copyOfPrevCellModes$","_copyOfPrevCellModes$2","_idToIdLookup$id","prevMode","originalId"],"sources":["C:/Users/mrvns/OneDrive/Desktop/BUILDMEUP-LATEST/Hackaton-BuildMeUp/admin/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.new.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    const newModel = _extends({}, cellModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _cellModesModel$id = cellModesModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_cellModesModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [cellModesModel, updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue\n    } = params;\n    const newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}